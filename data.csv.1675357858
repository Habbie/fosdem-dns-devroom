ID,Title,Subtitle,Abstract,Description,Notes,Duration,State,Progress,FirstName,Email,LastName,StartTime
15093,"AMENDMENT Parsing zone files really fast","","Zone parsers, like other parsers, are mostly sequential. To improve zone loading performance NLnet Labs researched ways to tune the process for much higher throughput. We analyze why current parsers are relatively slow and present ideas to leverage data parallelism (Single Instruction Multiple Data, or SIMD) and adjacent technologies to achieve a performance of (eventually, hopefully) GB/s.\n\nAlthough the focus is on parsing, vectorization has a much wider area of application.\nWe hope to familiarize (DNS) developers with vectorization concepts and show performance can be improved by taking a slightly different programming approach.\n\n(Please note that this talk replaces one entitled "",External DNS Operator in Kubernetes"", that was due to have been given by Servesha who sadly could not make it)","","Since this is on short notice, I still have to make the slides.","00:25:00","accepted","confirmed","Jeroen","jeroen@koekkoek.nl","Koekkoek","15:00"
14780,"Bizarre and Unusual Uses of DNS","Rule 53: If you can think of it, someone's done it in the DNS","DNS, like almost any protocol or system on the internet, has been used in ways almost from the day it was born that were probably never intended or envisioned by its inventors.\n\nThis talk is an overview of some of the more interesting ways that people have thought to embrace and extend DNS, from large to small.","From static traceroutes to fully-fledged companies using entire protocols based on top of the DNS, there are a hundred different ways where creative people have seen ways to bend it to their will. While a lot of these are now sadly confined to history, taking a look at some of these inventions is always fun and can often be educational. DNS tools, DNS toys, DNS tunneling, and DNS filesystems, are just some of the examples of uses and misuses that we'll take a look at.","I know I missed the deadline of December 7th, but after enquiring was informed that it would be OK to submit something for consideration if I could fit it into under 15 minutes.\n\nI've chosen "",other"", here because I don't know if 15 minutes is quite a lightning talk, but I can do the presentation fairly quickly if I skip the personal thoughts on each part. :)","00:10:00","accepted","confirmed","Peter","pgl@yoyo.org","Lowe","18:50"
13657,"CANCELLED External DNS Operator in Kubernetes","External DNS Operator","Please note that this\ntalk has been cancelled as the speake is no longer able to\nattend FOSDEM.","","","00:25:00","accepted","canceled","Servesha","sdudhgao@redhat.com","Dudhgaonkar","15:00"
13759,"Connectbyname and the Proxy Control option","","At NLnet Labs, we worked on creating an API and prototype implementation for 'connectbyname', library function that takes as input a (DNS) name and returns a TLS connection. The idea is to work towards a standard API for such a function, that can internally use asynchronous DNS lookups, implement Happy Eyeballs, support DANE, SVCB/HTTPS, encrypted client hello, etc. I will present the various prototype implementation we created.\n\nDuring this work we found that supporting the many new DNS connection types (DNS\n over TLS, DNS over HTTPS, DNS over QUIC) from within a library is creating a nu\nmber of problems. To deal with this problem, we created a new EDNS(0) option called Proxy Control option, that allows stub resolvers to send requirements to a local proxy. I will present this option and how it can help to keep DNS stub resolvers simple.\n","","","00:25:00","accepted","confirmed","Philip","pch-fosdem@u-1.phicoh.com","Homburg","16:20"
13862,"DNS for I2P: a Distributed Network without Central Authority","How Students Tried to Create a DNS for an Overlay Network without a Central Authority","A fully distributed network does not have - by definition - a central authority. Nevertheless overlay networks, like I2P ("",Invisible Internet Project"",) do have the need for a DNS. Also, by definition, there is nothing like trust between peers of such a network. Typically such a problem might be solved using a distributed storage layer driven by a byzantine fault tolerant consensus algorithm. Students of the Lucerne University of Applied Science and Arts created mid December 2022 a prototype solution including an API.","The presentation has the following content:\n\n* Short introduction to the concept of the I2P network and its b32 naming space (3')\n* Motivation: Why the I2P network needs a DNS (4')\n* Setup: the tools, a distributed layer to store data and an I2P test network (3')\n* Byzantine Fault Tolerance as consensus algorithm (2')\n* Design and usage of the DNS API for I2P (5')\n* Review and outlook (3')\n* Discussion: feedback from DNS devs (10')\n","The presentation is about an APGLv3 approach, from an academic perspective. It has nothing to do with any commercial approaches like "",namecoin"",, "",unstoppabledomains"", or other related stuff (it's also not a DNSSEC/hybrid approach). \n\nThis approach is experimental, unstable and hopefully interesting enough to discuss.","00:25:00","accepted","confirmed","Konrad","konrad@diva.exchange","Bächler","15:30"
13665,"Hosting your own DNS for 'fun' and zero profit","","Sometimes, you can't find a service provider that meets all of your requirements, and you know that there is open source software which can meet them, but you'll have to take on the task of deploying and maintaining it yourself. This talk is about my journey to provide a fully-featured DNS service for my personal domains, using PowerDNS Authoritative Server, at very low cost and without subscribing to any 'big tech' services where I would be the product and not the customer!\n\nIn my case, fully-featured includes DNSSEC with online signing, DNS UPDATE (RFC 2136) support (primarily used for ACME DNS-01 challenges for Let's Encrypt certificates), SVCB/HTTPS records, and more. The talk will also cover the way that I use Ansible to manage zones and their content in the authoritative servers, using Ansible modules I created and published. As a bonus, I'll also talk about how I manage recursive resolvers on my LANs with the ability to resolve names from my own domains even if Internet connectivity is lost, and with nearly immediate updates when the zone contents are changed.","","","00:25:00","accepted","confirmed","Kevin","fosdem@kevin.km6g.us","Fleming","17:50"
13674,"Implementation of the Drink server: programming details","","The Drink authoritative server was created both to have dynamic answers (such as the IP address of the resolver) and to be used as a platform for DNS experimentation. The talk will present its internal implementation and the choices made.","Drink is written in Elixir and makes use of several Elixir strengths, notably the parallelism, which is very important for a DNS server. Also, writing an Internet server means dealing with broken (or downright hostile) clients so robustness is important. We will discuss the technical decisions, their consequences, and the remaining problems.","","00:25:00","accepted","confirmed","Stéphane","stephane+fosdem@bortzmeyer.org","Bortzmeyer","17:20"
14587,"iothnamed","a DNS server/forwarder/cache for the Internet of Threads","iothnamed is a DNS server/forwarder/cache for the Internet of Threads supporting hash based IPv6 addresses and OTIP, i.e. one time IP.\n\nHash based IPv6 addresses:\nThe host part of an IPv6 address can be computed as the result of a hash function computer on the fully qualified domain name.\nThis eases the life of system administrators dealing with IPv6 networks.\n\nOne Time IP:\nOTIP means that the current IP address of a server changes periodically to prevent networking attacks. This method has mainly been designed for IPv6 networks.","Hash Based IPv6 address:\nThe configuration of an IPv6 network is a rather daunting and error-prone procedure for system administrators. Each node must be provided with its own (128 bit long) IPv6 address and with a domain name manageable by human beings.\nAutoconfiguration methods can give addresses to interfaces but do not provide any means of configuring the DNS. So autoconfiguration is suitable for clients. If a host has to act as a server, it must have a fully qualified domain name and the DNS service has to map its name to its IP address.\nIn the Internet of Thread scenario, the number of network nodes can be orders of magnitude higher than before, as each process or thread can be a node. This idea of hash based IPv6 addresses is a viable solution to the problem to manage the DNS resolution in IoTh environments.\n\n\nOne Time IP:\nHosting servers use a finite number of IP addresses to connect on the net. Attackers can collect those by wiretapping the network and create a catalog of valid addresses and services in order to attack the servers. OTIP can prevent these attacks, or make them harder to succeed as the addresses collected by network sniffers expire in a short time. OTIP aims to provide one further layer of protection for private services.","","00:25:00","accepted","confirmed","Renzo","renzo@cs.unibo.it","Davoli","16:50"
14086,"Moving from home grown to open source","A thrilling tale of RFC non-compliance, wildcard hell and scaling issues","In this presentation I will go into the difficulties I encountered trying to move TransIP from its own proprietary DNS solution "",TransDNS"", to an open source solution.\nTopics for the talk are:\n- Why we had a closed source solution in the first place\n- Problems caused by RFC non-compliance, specifically related to wildcard handling\n- Missing features in the selected OSS solution (PowerDNS) and how we fixed them\n- How we tested and rolled out the final solution\n- Scaling issues we ran into once it was deployed and how we solved them","","For now this is pretty bare, I will extend it going forward. Also the duration is a bit of a guestimate.","00:25:00","accepted","confirmed","Robin","ghostshaw@gmail.com","Geuze","18:20"
14215,"Phoenix Domain Attack ","Ghost Domain Reloaded: Vulnerable Links in Domain Name Delegation and Revocation","Phoenix Domain is a general and novel attack that allows adversaries to maintain the revoked malicious domain continuously resolvable at scale, which enables an old, mitigated attack, Ghost Domain. Phoenix Domain has two variations and affects all mainstream DNS software and public DNS resolvers overall because it does not violate any DNS specifications and best security practices.","Phoenix Domain is a general and novel attack that allows adversaries to maintain the revoked malicious domain continuously resolvable at scale, which enables an old, mitigated attack, Ghost Domain. Phoenix Domain has two variations and affects all mainstream DNS software and public DNS resolvers overall because it does not violate any DNS specifications and best security practices.\n\nThe attack is made possible through systematically "",reverse engineer"", the cache operations of 8 DNS implementations, and new attack surfaces are revealed in the domain name delegation processes. We select 41 well-known public DNS resolvers and prove that all surveyed DNS services are vulnerable to Phoenix Domain, including Google Public DNS and Cloudflare DNS. Extensive measurement studies are performed with 210k stable and distributed DNS recursive resolvers, and results show that even after one month from domain name revocation and cache expiration, more than 25% of recursive resolvers can still resolve it.\n\nThe proposed attack provides an opportunity for adversaries to evade the security practices of malicious domain take-down. We have reported discovered vulnerabilities to all affected vendors and suggested 6 types of mitigation approaches to them. Until now, 7 DNS software providers and 15 resolver vendors, including BIND, Unbound, Google, and Cloudflare, have confirmed the vulnerabilities, and some of them are implementing and publishing mitigation patches according to our suggestions. In addition, 9 CVE numbers have been assigned. The study calls for standardization to address the issue of how to revoke domain names securely and maintain cache consistency.","","00:30:00","rejected","unconfirmed","Xiang","idealeer521@gmail.com","Li",""
14664,"Why resolving two names in a GUI program is hard","Summary of available name resolution APIs on Linux and why a new one is needed","- summary of common C library calls to translate name to IP address(es) and back\n- We have getaddrinfo() calls and nsswitch modules for different name resolution backends. But they provide blocking only calls.\n- BSD sockets allows hundreds or thousands concurrent connections from a single thread application. But resolving 4 different names in parallel is difficult from a single thread application.\n- When we have common GUI application loops for GLib or Qt, why we lack API integrating with them well?\n- Most of GUI applications should avoid blocking calls in main thread today.\n- Is it necessary to block on name resolution? How name resolution works and why I think asynchronous calls would work as well.\n- Why using just raw DNS libraries might not be a solution for everyone\n- Use .local zone plugin nss-mdns as example why a simple to use API for name resolution is needed not only for unicast DNS queries.\n- How to handle LLMNR protocol and not break other things, which happens with current systemd-resolved","","","00:15:00","accepted","confirmed","Petr","pemensik@redhat.com","Menšík","16:00"
